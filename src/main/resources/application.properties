# active profiles config
#
# the application uses two active profiles
#
# one - for select database
# ------------------------------------------------
# When using HSQL, use: hsqldb
# When using MySQL, use: mysql
# When using PostgreSQL, use: postgres
# When using H2, use: h2
# ------------------------------------------------
#
# and one for selected repository layer
# ------------------------------------------------
# When using Spring jpa, use: jpa
# When using Spring JDBC, use: jdbc
# When using Spring Data JPA, use: spring-data-jpa
# ------------------------------------------------

spring.profiles.active=postgres,spring-data-jpa

# ------------------------------------------------

server.port=9966
server.servlet.context-path=/petclinic/

# Default database platform; can be overridden by other profile-specific property sources 
spring.sql.init.platform=h2
# Ensures schema & data reload on every restart (good for local dev)
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath*:db/${spring.sql.init.platform}/schema.sql
spring.sql.init.data-locations=classpath*:db/${spring.sql.init.platform}/data.sql

spring.messages.basename=messages/messages
spring.jpa.open-in-view=false

# OpenAPI/Swagger UI (Defaults to true)
#springdoc.api-docs.enabled=true
#springdoc.swagger-ui.enabled=true

logging.level.org.springframework=INFO
# logging.level.org.springframework=DEBUG

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# enable the desired authentication type
# by default, the authentication is disabled
petclinic.security.enable=true



# Primary application cache uses Redis
spring.cache.type=redis
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.repositories.enabled=false

# CORS config
app.cors.allowed-origins=http://localhost:3000
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=Content-Type,Authorization,X-Request-With
app.cors.exposed-head=Location,Link,X-Rate-Limit-Remaining
app.cors.allow-credential=true
app.cors.max-age=3600

# enable Bucket4j for rate limit
bucket4j.enabled=true
bucket4j.cache-to-use=hazelcast-spring

# --- rule 1: /api/visits/** : 100 req /min ---
bucket4j.filters[0].filter-order=100
bucket4j.filters[0].cache-name=rateLimitVisits
bucket4j.filters[0].url=^/api/visits(/.*)?$
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=100
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=MINUTES
bucket4j.filters[0].rate-limits[0].cache-key=getRemoteAddr()


# --- rule 2: /api/owners/**: 100 req/min ---
bucket4j.filters[1].filter-order=100
bucket4j.filters[1].cache-name=rateLimitOwners
bucket4j.filters[1].url=^/api/owners(/.*)?$
bucket4j.filters[1].filter-method=servlet
bucket4j.filters[1].rate-limits[0].bandwidths[0].capacity=100
bucket4j.filters[1].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[1].rate-limits[0].bandwidths[0].unit=MINUTES
bucket4j.filters[1].rate-limits[0].cache-key=getRemoteAddr()


# --- rule 3: /api/** : 1000 req / min, user-id, fallback IP ---
bucket4j.filters[2].filter-order=200
bucket4j.filters[2].cache-name=rateLimitApi
bucket4j.filters[2].url=^/api(/.*)?$
bucket4j.filters[2].filter-method=servlet
bucket4j.filters[2].rate-limits[0].bandwidths[0].capacity=1000
bucket4j.filters[2].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[2].rate-limits[0].bandwidths[0].unit=MINUTES
bucket4j.filters[2].rate-limits[0].cache-key=getPrincipal() != null ? getPrincipal() : getRemoteAddr()



#config jwt
petclinic.jwt.base64-secret=ODcxODJlOGI4YTdhZWNlYzE4NmRhNzQwYzQ4ZmIxOTQzODMzZDcxOWQ2OGVlNTk5MjY0MTcxNTc3YTcyZmIzN2I0YmI4NmI1ZDU2NDU4YzUxZjI0MDMwM2E5MDI4YWU5YTIyMWQ5ZDNhODBhMmNhZjFkM2VlZWRhN2Y4ZWVlOTk=
petclinic.jwt.token-validity-in-seconds=86400
